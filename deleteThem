# used from @agaltsoff 

from urllib.parse import urlencode
from urllib.request import urlopen
import time
import json
import codecs
import datetime
from collections import OrderedDict

reader = codecs.getreader("utf-8")

# Obtain here: https://api.slack.com/custom-integrations/legacy-tokens
# token = 'xoxp-229471773152-231005232801-424564962467-c850b0894c152cb51ccb27f183d570b9'
# token = 'xoxp-155909152929-302066567778-424566238963-2504694c13e5105f3954517ff16355d2' 
  token = 'xoxp-155909152929-156678197541-254471396421-d7552aa8c2990bcb3afc964c27082b51'

# Set it to delete only this user's files. Handy if you are not admin.
member_id= ''

# Params for file listing. More info here: https://api.slack.com/methods/files.list

# Delete files older than this:
days = 20
ts_to = int(time.time()) - days * 24 * 60 * 60

# How many? (Maximum is 1000, otherwise it defaults to 100)
count = 1000

# Types?
types = 'all'
# types = 'spaces,snippets,images,gdocs,zips,pdfs'
# types = 'zips'

def list_files(user= ''):
    params = {
        'token': token,
        'ts_to': ts_to,
        'count': count,
        'types': types,
        'user': user,
    }
    uri = 'https://slack.com/api/files.list'
    response = reader(urlopen(uri + '?' + urlencode(params)))
    return json.load(response)['files']

def greater_mb(file, mb):
    return file['size'] / 1000000 >= mb

def smaller_mb(file, mb):
    return file['size'] / 1000000 < mb

def filter_by_size(files, greater_or_smaller, mb):
    return [file for file in files if greater_or_smaller(file, mb)]

def info(file):
    order = ['Title', 'Name', 'Created', 'Size', 'Filetype',
             'Comment', 'Permalink', 'Download', 'User', 'Channels']
    info = {
        'Title': file['title'],
        'Name': file['name'],
        'Created': datetime.datetime.utcfromtimestamp(file['created']).strftime('%B %d, %Y %H:%M:%S'),
        'Size': str(file['size'] / 1000000) + ' MB',
        'Filetype': file['filetype'],
        'Comment': file['initial_comment'] if 'initial_comment' in file else '',
        'Permalink': file['permalink'],
        'Download': file['url_private'],
        'User': file['user'],
        'Channels': file['channels']
    }
    return OrderedDict((key, info[key]) for key in order)

def delete_files(files):
    num_files = len(files)
    file_ids = map(lambda f: f['id'], files)
    print('Deleting %i files'%num_files)
    for index, file_id in enumerate(file_ids):
        params = {
            'token': token,
            'file': file_id
        }
        uri = 'https://slack.com/api/files.delete'
        response = reader(urlopen(uri + '?' + urlencode(params)))
        print((index + 1, "of", num_files, "-",
               file_id, json.load(response)['ok']))

print('Retrieving files older than %s days'%(days))			   
			   
files = list_files(member_id)

print('Total %i files'%len(files))

files = filter_by_size(files, greater_mb, 50)

print('Match size %i files'%len(files))

#delete_files(files) # Commented out, so you don't accidentally run this.
